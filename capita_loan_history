#! /usr/bin/perl

# capita_loan_history

use v5.24;
use warnings;
use open qw<:locale>;

use Const::Fast qw<const>;

use Getopt::Long qw<GetOptions :config gnu_getopt>;
use Web::Query qw<wq>;
use LWP::UserAgent;
use HTTP::CookieJar::LWP;
use Text::Trim qw<trim>;


const my $Usage           => "$0: [-l LOCATION] CARD-NUMBER PIN\n";
const my $URLPrefix       => 'https://capitadiscovery.co.uk/';
const my $URLSuffix       => '/account/history';
const my $DefaultLocation => 'bradford';


GetOptions 'location|l=s' => \(my $location = $DefaultLocation) or die $Usage;
my $loans_url = "$URLPrefix\L$location\E$URLSuffix";

die $Usage if @ARGV != 2;
my ($card_number, $pin) = @ARGV;

# To access the user's account, we need to log in. Attempt to view the loan
# history page and it will redirect to a log-in form (which, on success, will
# redirect back to the requested page).
my $login_form = (wq $loans_url)->find('form.loginForm');

# A logged-in user is tracked using cookies, so we need a user-agent with a
# cookie jar:
my $user_agent = LWP::UserAgent->new(cookie_jar => HTTP::CookieJar::LWP->new);

# Submit the log-in <form>, using the found <input> elements, adding in the
# user's library card number and pin into the relevant fields, and see where it
# redirects us to:
my %param =
(
  $login_form->find('input')
      ->map(sub { $_->attr('name') => $_->attr('value') })->@*,
  barcode => $card_number,
  pin     => $pin,
);
my $method = $login_form->attr('method');
my $logged_in_url = $user_agent->$method($login_form->attr('action'), \%param)
    ->header('Location');

# If logging in succeeded, this will have redirected us back to the URL we
# requested in the first place (but now with suitable cookies set). If it
# hasn't, then something's gone wrong:
die "Logging in failed: redirect to: $logged_in_url\n"
    if $logged_in_url ne $loans_url;

# Grab content from that page:
my $url = $loans_url;
while ($url)
{
  my $page = wq $user_agent->get($url)->decoded_content;

  # The loan history is in a <table>, with each <tr> containing details of a
  # book. Restrict to <tbody>, to avoid grabbing the headers:
  $page->find('table#history > tbody > tr')->each
  (
    sub
    {
      my $title = trim $_->find('th a')->text;
      my ($surname, $forename) = split /, /, $_->find('th span.author')->text;
      my ($borrowed, $returned) = $_->find('td.accDue')->text;

      no warnings qw<uninitialized>; # Some authors don't have forenames
      say join "\t", $borrowed, $returned, $forename, $surname, $title;
    }
  );

  # Only 10 books are listed at a time; if there are more there'll be a link
  # with the title ‘next’ — in which case get the URL it links to, for next
  # time round. The last page won't have such a link, ending the loop:
  $url = $page->find('a[title=next]')->attr('href');
}
